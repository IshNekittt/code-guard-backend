{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Code Guard API",
    "description": "API documentation for the Code Guard project. Contains endpoints for authentication, sidebar data, transactions, etc.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://code-guard-backend.onrender.com",
      "description": "Project's url"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Transactions",
      "description": "Transaction operations."
    },
    {
      "name": "Users",
      "description": "User operations."
    },
    {
      "name": "Sidebar",
      "description": "Data for displaying in the sidebar"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration",
        "description": "Registers the user",
        "operationId": "registration",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe",
                    "minLength": 3
                  },
                  "email": {
                    "description": "User's email",
                    "maxLength": 64,
                    "type": "string",
                    "example": "email@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345678",
                    "minLength": 8,
                    "maxLength": 64
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Log in a user",
        "operationId": "login",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "email@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "description": "User's access token",
                          "type": "string",
                          "example": "qweX9PnLmYxT4rDbfZKjUoNvHcR5mG2aLsBdXcJu"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Log out a user",
        "operationId": "logout",
        "security": [],
        "responses": {
          "204": {
            "description": "Logouts the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/currentUser": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's information",
        "description": "Get current user's info",
        "operationId": "currentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get all transactions",
        "description": "Get list of transactions with this endpoint",
        "operationId": "getAllTransactions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Get all transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transactions!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/transaction"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create transaction",
        "description": "Create a transaction with payload",
        "operationId": "postTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "category",
                  "date",
                  "summ"
                ],
                "properties": {
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "enum": [
                      "-",
                      "+"
                    ],
                    "example": "-"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "enum": [
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment",
                      "Income"
                    ],
                    "example": "Main expenses"
                  },
                  "date": {
                    "description": "Transaction's date",
                    "type": "string",
                    "format": "date",
                    "example": "2025-04-26T12:00:00.000Z"
                  },
                  "summ": {
                    "description": "Transaction's sum",
                    "type": "number",
                    "example": 1000
                  },
                  "comment": {
                    "description": "Comment to transaction",
                    "type": "string",
                    "example": "Oil"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/transactions/{id}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Patch transaction",
        "description": "Patch transaction by id",
        "operationId": "patchTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "enum": [
                      "-",
                      "+"
                    ],
                    "example": "-"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "enum": [
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment",
                      "Income"
                    ],
                    "example": "Main expenses"
                  },
                  "date": {
                    "description": "Transaction's date",
                    "type": "string",
                    "format": "date",
                    "example": "2025-04-26T12:00:00.000Z"
                  },
                  "summ": {
                    "description": "Transaction's sum",
                    "type": "number",
                    "example": 1000
                  },
                  "comment": {
                    "description": "Comment to transaction",
                    "type": "string",
                    "example": "Oil"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patch transaction by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction",
        "description": "Delete transaction by id",
        "operationId": "deleteTransaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete transaction by id"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/sidebar/balance": {
      "get": {
        "tags": [
          "Sidebar"
        ],
        "summary": "Get user balance",
        "description": "Returns the user's balance from the User model.",
        "operationId": "getBalance",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Balance retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "number",
                      "format": "float",
                      "example": 24000
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sidebar/exchange-rates": {
      "get": {
        "tags": [
          "Sidebar"
        ],
        "summary": "Get exchange rates from Monobank",
        "description": "Returns current exchange rates for USD and EUR from Monobank API.",
        "operationId": "getRates",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange rates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRates"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-2"
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sidebar/chart": {
      "get": {
        "tags": [
          "Sidebar"
        ],
        "summary": "Get chart data (currency trend)",
        "description": "Returns currency chart data from Monobank for visual trend display.",
        "operationId": "getChart",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Chart points successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-2"
          },
          "401": {
            "$ref": "#/components/responses/401-2"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ExchangeRates": {
        "type": "object",
        "properties": {
          "USD": {
            "type": "object",
            "properties": {
              "purchase": {
                "type": "number",
                "format": "float",
                "example": 27.55
              },
              "sale": {
                "type": "number",
                "format": "float",
                "example": 27.65
              }
            }
          },
          "EUR": {
            "type": "object",
            "properties": {
              "purchase": {
                "type": "number",
                "format": "float",
                "example": 30
              },
              "sale": {
                "type": "number",
                "format": "float",
                "example": 30.1
              }
            }
          }
        }
      },
      "Chart": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "currency": {
                  "type": "string",
                  "example": "USD"
                },
                "value": {
                  "type": "number",
                  "format": "float",
                  "example": 27.55
                }
              }
            }
          }
        }
      },
      "user": {
        "title": "User",
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe",
            "minLength": 3,
            "maxLength": 20
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "email@example.com"
          },
          "password": {
            "description": "Hashed user's password",
            "type": "string",
            "example": "$2b$10$RrwIu5gPU5U04YgA6kRzqePu5CEZ4LVvXPB4dfHfrklT2bHu3U9JG",
            "writeOnly": true
          },
          "balance": {
            "description": "User's balance",
            "type": "number",
            "example": 1200
          }
        }
      },
      "transaction": {
        "title": "Transaction",
        "type": "object",
        "required": [
          "_id",
          "userId",
          "type",
          "category",
          "date",
          "summ"
        ],
        "properties": {
          "_id": {
            "description": "Transaction's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "userId": {
            "description": "Transaction's user id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "type": {
            "description": "Transaction's type",
            "type": "string",
            "enum": [
              "-",
              "+"
            ],
            "example": "-"
          },
          "category": {
            "description": "Transaction's category",
            "type": "string",
            "enum": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment",
              "Income"
            ],
            "example": "Main expenses"
          },
          "date": {
            "description": "Transaction's date",
            "type": "string",
            "format": "date",
            "example": "2025-04-26T12:00:00.000Z"
          },
          "summ": {
            "description": "Transaction's sum",
            "type": "number",
            "example": 1000
          },
          "comment": {
            "description": "Comment to transaction",
            "type": "string",
            "example": "Oil"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "\\\"email\\\" must be a valid email"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "\\\"email\\\" must be a valid email"
                      },
                      "path": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "email"
                        }
                      },
                      "type": {
                        "type": "string",
                        "example": "string.email"
                      },
                      "context": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NotFound error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "string",
                  "example": "Not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong on the server"
                }
              }
            }
          }
        }
      },
      "401-2": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized access"
                }
              }
            }
          }
        }
      },
      "400-2": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "\"amount\" must be a number"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "message",
                      "path",
                      "type"
                    ],
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "\"amount\" must be a number"
                      },
                      "path": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "amount"
                        }
                      },
                      "type": {
                        "type": "string",
                        "example": "number.base"
                      },
                      "context": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}